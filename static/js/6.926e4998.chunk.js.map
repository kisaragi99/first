{"version":3,"sources":["components/common/FormsControls/FormControls.module.css","components/common/FormsControls/FormControls.js","utils/validators.js","components/Login/Login.jsx","components/Login/LoginContainer.jsx"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","Input","createField","placeholder","name","component","validators","text","validate","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","formSummaryError","Login","isAuth","to","wrapper","formData","loginMe","LoginContainer","this","React","Component","connect","state","badResult","auth"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,yC,iCCDzH,qJAIaC,EAAc,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SAC3CC,EAAWH,GAAWC,EAE5B,OACI,yBAAKG,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEJ,MAAQ,OACxD,6BACKC,GAEJC,GAAY,8BAAOF,KAKnBM,EAAW,SAACC,GACrB,OAAO,kBAACV,EAAgBU,EAAO,8CAAcA,EAAMC,MAAUD,MAGpDE,EAAQ,SAACF,GAClB,OAAO,kBAACV,EAAgBU,EAAO,2CAAUA,EAAMC,MAAUD,MAGhDG,EAAc,SAACC,EAAaC,EAAMC,EAAWC,GAA/B,IAA2CP,EAA3C,uDAAmD,GAAIQ,EAAvD,uDAA4D,GAA5D,OAAmE,6BAAK,kBAAC,IAAD,eAAOJ,YAAaA,EAC3BC,KAAMA,EACNC,UAAWA,EACXG,SAAUF,GACNP,IAASQ,K,iCC7BzG,oEAAO,IAAME,EAAW,SAAAC,GACpB,IAAGA,EAEH,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAGA,EAAMG,OAASD,EAAW,MAAM,2BAAN,OAAkCA,M,gJCqB7DE,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EArBL,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAczB,EAAW,EAAXA,MAG9B,OAAQ,oCACA,0BAAM0B,SAAUD,GAEXf,YAAY,QAAS,QAASD,IAAO,CAACQ,MACtCP,YAAY,WAAY,WAAYD,IAAO,CAACQ,KAAW,CAACU,KAAM,aAC9DjB,YAAY,KAAM,aAAcD,IAAO,KAAM,CAACkB,KAAM,YAAa,eAEjE3B,GAAS,yBAAKG,UAAWC,IAAEwB,kBACvB5B,GAEL,6BACI,+CAyBL6B,EAhBD,SAACtB,GAKX,OAAIA,EAAMuB,OACC,kBAAC,IAAD,CAAUC,GAAI,YAGrB,yBAAK5B,UAAWC,IAAE4B,SACd,qCACA,kBAACV,EAAD,CAAgBI,SAVP,SAACO,GACd1B,EAAM2B,QAAQD,Q,gBC1BhBE,E,uKAIE,OACI,kBAAC,EAAD,CAAOD,QAASE,KAAK7B,MAAM2B,QAASJ,OAAQM,KAAK7B,MAAMuB,a,GALtCO,IAAMC,WAiBpBC,uBAPO,SAACC,GACnB,MAAO,CACHC,UAAWD,EAAME,KAAKD,UACtBX,OAAQU,EAAME,KAAKZ,UAIa,CAACI,aAA1BK,CAAoCJ","file":"static/js/6.926e4998.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__GE7O2\",\"error\":\"FormControls_error__2ckkk\",\"formSummaryError\":\"FormControls_formSummaryError__3Dsfj\"};","import React from \"react\";\r\nimport s from \"./FormControls.module.css\";\r\nimport {Field} from \"redux-form\";\r\n\r\nexport const FormControl = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : null)}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    return <FormControl {...props}><textarea {...props.input}{...props}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    return <FormControl {...props}><input{...props.input}{...props}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, component, validators, props = {}, text=\"\") => <div><Field placeholder={placeholder}\r\n                                                                                            name={name}\r\n                                                                                            component={component}\r\n                                                                                            validate={validators}\r\n                                                                                            {...props}/>{text}</div>;\r\n","export const required = value => {\r\n    if(value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value.length > maxLength) return `Max Length is exceeded: ${maxLength}`\r\n    return undefined;\r\n}\r\n","import React from \"react\";\r\nimport s from \"./../common/FormsControls/FormControls.module.css\"\r\nimport {reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormControls\";\r\nimport {required} from \"../../utils/validators\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    // const { handleSubmit } = props;\r\n\r\n    return (<>\r\n            <form onSubmit={handleSubmit}>\r\n\r\n                {createField(\"Login\", \"login\", Input, [required])}\r\n                {createField(\"Password\", \"password\", Input, [required], {type: \"password\"})}\r\n                {createField(null, \"rememberMe\", Input, null, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n                {error && <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.loginMe(formData);\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"profile\"}/>\r\n    }\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\nimport Login from \"./Login\";\r\nimport {loginMe} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nclass LoginContainer extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Login loginMe={this.props.loginMe} isAuth={this.props.isAuth}/>\r\n        );\r\n    };\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        badResult: state.auth.badResult,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {loginMe})(LoginContainer);"],"sourceRoot":""}